# Add mrustc slice length intrinsics
--- src/libcore/intrinsics.rs
+++ src/libcore/intrinsics.rs
@@ -685,4 +685,8 @@
     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;
 
+    /// Obtain the length of a slice pointer
+    #[cfg(rust_compiler="mrustc")]
+    pub fn mrustc_slice_len<T>(pointer: *const [T]) -> usize;
+
     /// Gets a static string slice containing the name of a type.
     pub fn type_name<T: ?Sized>() -> &'static str;
--- src/libcore/slice/mod.rs
+++ src/libcore/slice/mod.rs
@@ -68,5 +68,8 @@
     pub const fn len(&self) -> usize {
-        unsafe {
-            crate::ptr::Repr { rust: self }.raw.len
-        }
+        #[cfg(not(rust_compiler="mrustc"))]
+        #[cfg_attr(not(bootstrap), allow_internal_unstable(const_fn_union))]
+        const fn len_inner<T>(s: &[T]) -> usize { unsafe { crate::ptr::Repr { rust: s }.raw.len } };
+        #[cfg(rust_compiler="mrustc")]
+        const fn len_inner<T>(s: &[T]) -> usize { unsafe { crate::intrinsics::mrustc_slice_len(s) } }
+        len_inner(self)
     }
#
# Static-link rustc_codegen_llvm so the generated rustc is standalone
# > Note: Interacts with `rustc-1.39.0-overrides.toml`
#
--- src/librustc_interface/util.rs
+++ src/librustc_interface/util.rs
@@ -421,2 +421,4 @@
 pub fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {
+    #[cfg(rust_compiler="mrustc")]
+    { if(backend_name == "llvm") { extern "Rust" { fn __rustc_codegen_backend() -> Box<dyn CodegenBackend>; } return || unsafe { __rustc_codegen_backend() } } }
     // For now we only allow this function to be called once as it'll dlopen a
# Disable most architecture intrinsics
--- src/stdarch/crates/std_detect/src/detect/mod.rs
+++ src/stdarch/crates/std_detect/src/detect/mod.rs
@@ -74,4 +74,7 @@
         // this run-time detection logic is never called.
         #[path = "os/other.rs"]
         mod os;
+    } else if #[cfg(rust_compiler="mrustc")] {
+        #[path = "os/other.rs"]
+        mod os;
     } else if #[cfg(any(target_arch = "x86", target_arch = "x86_64"))] {
--- vendor/ppv-lite86/src/lib.rs
+++ vendor/ppv-lite86/src/lib.rs
@@ -12,9 +12,9 @@
-#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri)))]
+#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri), not(rust_compiler="mrustc")))]
 pub mod x86_64;
-#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri)))]
+#[cfg(all(feature = "simd", target_arch = "x86_64", not(miri), not(rust_compiler="mrustc")))]
 use self::x86_64 as arch;

-#[cfg(any(miri, not(all(feature = "simd", any(target_arch = "x86_64")))))]
+#[cfg(any(miri, rust_compiler="mrustc", not(all(feature = "simd", any(target_arch = "x86_64")))))]
 pub mod generic;
-#[cfg(any(miri, not(all(feature = "simd", any(target_arch = "x86_64")))))]
+#[cfg(any(miri, rust_compiler="mrustc", not(all(feature = "simd", any(target_arch = "x86_64")))))]
 use self::generic as arch;


--- src/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangleNodes.h
+++ src/llvm-project/llvm/include/llvm/Demangle/MicrosoftDemangleNodes.h
@@ -16,6 +16,8 @@
 #include "llvm/Demangle/DemangleConfig.h"
 #include "llvm/Demangle/StringView.h"
 #include <array>
+#include <cstdint>
+#include <string>
 
 namespace llvm {
 namespace itanium_demangle {
##
## gcc (used by mrustc) has 16-byte uint128_t alignment, while rustc uses 8
##
--- src/libsyntax/ast.rs
+++ src/libsyntax/ast.rs
@@ -985,3 +985,3 @@ pub struct Expr {
 // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", not(rust_compiler="mrustc")))]
 static_assert_size!(Expr, 96);

--- src/librustc/ty/sty.rs
+++ src/librustc/ty/sty.rs
@@ -2257,3 +2257,3 @@ pub struct Const<'tcx> {

-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", not(rust_compiler="mrustc")))]
 static_assert_size!(Const<'_>, 40);

--- src/librustc/hir/mod.rs
+++ src/librustc/hir/mod.rs
@@ -1412,8 +1412,8 @@ pub struct Expr {
 }
 
 // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.
-#[cfg(target_arch = "x86_64")]
-static_assert_size!(Expr, 72);
+#[cfg(all(target_arch = "x86_64", not(rust_compiler="mrustc")))]
+static_assert_size!(Expr, 72);
 
 impl Expr {
     pub fn precedence(&self) -> ExprPrecedence {

--- src/librustc/mir/interpret/value.rs
+++ src/librustc/mir/interpret/value.rs
@@ -106,8 +106,8 @@ pub enum Scalar<Tag = (), Id = AllocId> {
     Ptr(Pointer<Tag, Id>),
 }
 
-#[cfg(target_arch = "x86_64")]
-static_assert_size!(Scalar, 24);
+#[cfg(all(target_arch = "x86_64", not(rust_compiler="mrustc")))]
+static_assert_size!(Scalar, 24);
 
 impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Scalar<Tag, Id> {
     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {

# Workaround linker error attempting to find symbol CFMutableAttributedStringGetTypeID on macOS.
# See details at https://github.com/servo/core-foundation-rs/pull/357
--- vendor/core-foundation/src/attributed_string.rs
+++ vendor/core-foundation/src/attributed_string.rs
@@ -41,7 +41,7 @@ impl CFAttributedString {
 declare_TCFType!{
     CFMutableAttributedString, CFMutableAttributedStringRef
 }
-impl_TCFType!(CFMutableAttributedString, CFMutableAttributedStringRef, CFMutableAttributedStringGetTypeID);
+impl_TCFType!(CFMutableAttributedString, CFMutableAttributedStringRef, CFAttributedStringGetTypeID);
 
 impl CFMutableAttributedString {
     #[inline]
--- vendor/core-foundation-sys/src/attributed_string.rs
+++ vendor/core-foundation-sys/src/attributed_string.rs
@@ -51,6 +51,4 @@ extern {
         attr_name: CFStringRef,
         value: CFTypeRef,
     );
-
-    pub fn CFMutableAttributedStringGetTypeID() -> CFTypeID;
 }
diff --git src/libstd/sys/unix/fast_thread_local.rs src/libstd/sys/unix/fast_thread_local.rs
index 952ba40ee87..9e88e4c3954 100644
--- src/libstd/sys/unix/fast_thread_local.rs
+++ src/libstd/sys/unix/fast_thread_local.rs
@@ -50,7 +50,7 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {
     #[thread_local]
     static REGISTERED: Cell<bool> = Cell::new(false);
     if !REGISTERED.get() {
-        _tlv_atexit(run_dtors, ptr::null_mut());
+        __cxa_thread_atexit(run_dtors, ptr::null_mut());
         REGISTERED.set(true);
     }
 
@@ -64,7 +64,7 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {
     }
 
     extern {
-        fn _tlv_atexit(dtor: unsafe extern fn(*mut u8),
+        fn __cxa_thread_atexit(dtor: unsafe extern fn(*mut u8),
                        arg: *mut u8);
     }
 
diff --git src/llvm-project/clang/lib/Basic/Targets/OSTargets.h src/llvm-project/clang/lib/Basic/Targets/OSTargets.h
index 67fa1a537fe..2f2ce1ccafd 100644
--- src/llvm-project/clang/lib/Basic/Targets/OSTargets.h
+++ src/llvm-project/clang/lib/Basic/Targets/OSTargets.h
@@ -92,7 +92,7 @@ public:
     this->TLSSupported = false;
 
     if (Triple.isMacOSX())
-      this->TLSSupported = !Triple.isMacOSXVersionLT(10, 7);
+      this->TLSSupported = !Triple.isMacOSXVersionLT(10, 4);
     else if (Triple.isiOS()) {
       // 64-bit iOS supported it from 8 onwards, 32-bit device from 9 onwards,
       // 32-bit simulator from 10 onwards.
diff --git src/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp src/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
index 50fb30a95cb..1df40230e8f 100644
--- src/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
+++ src/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
@@ -2487,7 +2487,7 @@ static void emitGlobalDtorWithCXAAtExit(CodeGenFunction &CGF,
   const char *Name = "__cxa_atexit";
   if (TLS) {
     const llvm::Triple &T = CGF.getTarget().getTriple();
-    Name = T.isOSDarwin() ?  "_tlv_atexit" : "__cxa_thread_atexit";
+    Name = (T.isOSDarwin() && !T.isMacOSXVersionLT(10, 7)) ?  "_tlv_atexit" : "__cxa_thread_atexit";
   }
 
   // We're assuming that the destructor function is something we can
diff --git src/llvm-project/llvm/include/llvm/ADT/Triple.h src/llvm-project/llvm/include/llvm/ADT/Triple.h
index eed315c929a..649b35f9430 100644
--- src/llvm-project/llvm/include/llvm/ADT/Triple.h
+++ src/llvm-project/llvm/include/llvm/ADT/Triple.h
@@ -809,7 +809,7 @@ public:
 
   /// Tests whether the target uses emulated TLS as default.
   bool hasDefaultEmulatedTLS() const {
-    return isAndroid() || isOSOpenBSD() || isWindowsCygwinEnvironment();
+    return isAndroid() || isOSOpenBSD() || isWindowsCygwinEnvironment() || isMacOSXVersionLT(10, 7);
   }
 
   /// Tests whether the target uses -data-sections as default.
--- src/llvm-project/llvm/lib/ObjectYAML/MachOYAML.cpp
+++ src/llvm-project/llvm/lib/ObjectYAML/MachOYAML.cpp
@@ -21,6 +21,20 @@
 #include <cstdint>
 #include <cstring>
 
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 
 MachOYAML::LoadCommand::~LoadCommand() = default;
--- src/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
+++ src/llvm-project/llvm/tools/obj2yaml/macho2yaml.cpp
@@ -14,7 +14,21 @@
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Support/LEB128.h"
 
-#include <string.h> // for memcpy
+#include <string.h> // for memcpy and strnlen
+
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
 
 using namespace llvm;
 
--- src/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp
+++ src/llvm-project/llvm/tools/llvm-readobj/ObjDumper.cpp
@@ -21,6 +21,20 @@
 #include "llvm/Support/raw_ostream.h"
 #include <map>
 
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 
 ObjDumper::ObjDumper(ScopedPrinter &Writer) : W(Writer) {}
--- src/llvm-project/llvm/tools/llvm-objcopy/MachO/MachOReader.cpp
+++ src/llvm-project/llvm/tools/llvm-objcopy/MachO/MachOReader.cpp
@@ -13,6 +13,20 @@
 #include "llvm/Object/MachO.h"
 #include <memory>
 
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 namespace llvm {
 namespace objcopy {
 namespace macho {
--- vendor/backtrace-sys/src/libbacktrace/macho.c
+++ vendor/backtrace-sys/src/libbacktrace/macho.c
@@ -76,6 +76,20 @@
 #include "backtrace.h"
 #include "internal.h"
 
+#ifdef __APPLE__
+#include <Availability.h>
+#if __MAC_OS_X_VERSION_MIN_REQUIRED < 1070
+static size_t strnlen(const char *s, size_t maxlen) {
+  size_t l = 0;
+  while (l < maxlen && *s) {
+    l++;
+    s++;
+  }
+  return l;
+}
+#endif
+#endif
+
 struct macho_commands_view
 {
     struct backtrace_view view;
